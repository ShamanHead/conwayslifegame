export default class CanvasGenerator {
    static letting = 
        [
            ['a', [
                '0', '1', '0',
                '1', '0', '1',
                '1', '1', '1',
                '1', '0', '1',
                '1', '0', '1'
            ] ],
            ['b', [
                '1', '1', '0',
                '1', '0', '1',
                '1', '1', '0',
                '1', '0', '1',
                '1', '1', '0'
            ] ],
            ['c', [
                '0', '1', '1',
                '1', '0', '0',
                '1', '0', '0',
                '1', '0', '0',
                '0', '1', '1'
            ] ],
            ['d', [
                '1', '1', '0',
                '1', '0', '1',
                '1', '0', '1',
                '1', '0', '1',
                '1', '1', '0'
            ] ],
            ['e', [
                '1', '1', '1',
                '1', '0', '0',
                '1', '1', '1',
                '1', '0', '0',
                '1', '1', '1'
            ] ],
            ['f', [
                '1', '1', '1',
                '1', '0', '0',
                '1', '1', '1',
                '1', '0', '0',
                '1', '0', '0'
            ] ],
            ['g', [
                '1', '1', '0',
                '1', '0', '0',
                '1', '1', '1',
                '1', '0', '1',
                '1', '1', '1'
            ] ],
            ['h', [
                '1', '0', '1',
                '1', '0', '1',
                '1', '1', '1',
                '1', '0', '1',
                '1', '0', '1'
            ] ],
            ['i', [
                '0', '1', '0',
                '0', '1', '0',
                '0', '1', '0',
                '0', '1', '0',
                '0', '1', '0'
            ] ],
            ['j', [
                '0', '1', '0',
                '0', '1', '0',
                '0', '1', '0',
                '0', '1', '0',
                '1', '1', '0'
            ] ],
            ['k', [
                '1', '0', '1',
                '1', '1', '0',
                '1', '0', '0',
                '1', '1', '0',
                '1', '0', '1'
            ] ],
            ['l', [
                '1', '0', '0',
                '1', '0', '0',
                '1', '0', '0',
                '1', '0', '0',
                '1', '1', '1'
            ] ],
            ['m', [
                '1', '0', '1',
                '1', '1', '1',
                '1', '1', '1',
                '1', '0', '1',
                '1', '0', '1'
            ] ],
            ['n', [
                '1', '1', '1',
                '1', '0', '1',
                '1', '0', '1',
                '1', '0', '1',
                '1', '0', '1'
            ] ],
            ['o', [
                '0', '1', '0',
                '1', '0', '1',
                '1', '0', '1',
                '1', '0', '1',
                '0', '1', '0'
            ] ],
            ['p', [
                '1', '1', '1',
                '1', '0', '1',
                '1', '1', '1',
                '1', '0', '0',
                '1', '0', '0'
            ] ],
            ['q', [
                '1', '1', '1',
                '1', '0', '1',
                '1', '1', '1',
                '0', '0', '1',
                '0', '0', '1'
            ] ],
            ['r', [
                '1', '1', '1',
                '1', '0', '1',
                '1', '1', '1',
                '1', '1', '0',
                '1', '0', '1'
            ] ],
            ['s', [
                '0', '1', '1',
                '1', '0', '0',
                '1', '1', '1',
                '0', '0', '1',
                '1', '1', '1'
            ] ],
            ['t', [
                '1', '1', '1',
                '0', '1', '0',
                '0', '1', '0',
                '0', '1', '0',
                '0', '1', '0'
            ] ],
            ['u', [
                '1', '0', '1',
                '1', '0', '1',
                '1', '0', '1',
                '1', '0', '1',
                '1', '1', '1'
            ] ],
            ['v', [
                '1', '0', '1',
                '1', '0', '1',
                '1', '0', '1',
                '1', '0', '1',
                '0', '1', '0'
            ] ],
            ['w', [
                '1', '0', '1',
                '1', '0', '1',
                '1', '0', '1',
                '1', '1', '1',
                '1', '0', '1'
            ] ],
            ['x', [
                '1', '0', '1',
                '1', '0', '1',
                '0', '1', '0',
                '1', '0', '1',
                '1', '0', '1'
            ] ],
            ['y', [
                '1', '0', '1',
                '1', '0', '1',
                '1', '1', '1',
                '0', '1', '0',
                '0', '1', '0'
            ] ],
            ['z', [
                '1', '1', '1',
                '0', '0', '1',
                '0', '1', '0',
                '1', '0', '0',
                '1', '1', '1'
            ] ],
            [' ', [
                '0', '0', '0',
                '0', '0', '0',
                '0', '0', '0',
                '0', '0', '0',
                '0', '0', '0'
            ] ]            
        ];

    static generateFromString(string, width, height, useRandom = false) {
        let cells = {active: [], toAdd: [], toDelete: [], toRender: []},
            point = [Math.round(height / 2), Math.round((width / 2) - string.length * 2)],
            quantifier = 3,
            unitSize = (width * height) / (15 * quantifier);

        for(let y = 0;y < height;y++) {
            cells.active[y] = [];
            
            for(let x = 0;x < width;x++) {
                cells.active[y][x] = 0;
                //cells.toRender.push([y,x])
            }
        }
    
        for(let i = 0;i < string.length;i++) {
            let currentString = string[i],
                found = false;

            for(let j = 0;j < this.letting.length;j++) {
                if(this.letting[j][0] == currentString) {
                    found = this.letting[j];
                    break;
                }
            }
            
            if(!found) continue;

            let offsetY = point[0],
                offsetX = point[1],
                matrix = found[1];

            for(let i = 0;i < 15;i++) {
                if(i % 3 === 0) {
                    offsetY++;
                    offsetX = point[1];
                }
        
                if(matrix[i] === '1') {
                    cells.active[offsetY][offsetX] = 1;
                    cells.toRender.push([offsetY, offsetX]);
                }
                offsetX++;
            }

            point = [point[0], point[1] + 4]; 
        }

        return cells;
    }
}
